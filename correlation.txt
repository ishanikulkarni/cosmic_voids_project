import h5py
import nbodykit.lab as nlab
import nbodykit.cosmology as ncosmo
from nbodykit import CurrentMPIComm, transform
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import dask.array as da
from nbodykit.source.catalog import HaloCatalog, HDFCatalog
import os

#Add two for loops to go through all the realizations and stuff

densities = ['']
wiggles = ['wiggles','no-wiggles']#['wiggles', 'no-wiggles']

sim = 'Quijote'
redshift = '1'
zlab = '1.00'
scale = 'lin'
binlab = '_dr1'
c = '_halos'# #'_cdm'
cola = '' #'COLA/'
num_realizations = 1
crazy = '' #'untrimmed_dencut_'

Nmesh=256

BoxSize = 2000.0

##### This section is for voids #####

# Voids
# Read in void catalog
redshift='1'
w='no-wiggles'
d='_'
realization=5
os.chdir('/')
'''
print(type('projects/SPERGEL/COLA_runs/voidcatalogs/'))
print(type(cola))
print(type(redshift))
print(type(sim))
print(type(w))
print(type(d))
print(type(realization))
print(type(c))
print(type(crazy))
print(type(zlab))
'''

for wiggle in wiggles:
    for realization in range(0,5):
    	file = 'projects/SPERGEL/COLA_runs/voidcatalogs/'+cola+'z'+redshift+sim+'/'+sim+'_ss1.0/sample_'+sim+'_'+w+d+str(realization)+c+'_z'+zlab+'/'+crazy+'centers_central_'+sim+'_'+w+d+str(realization)+c+'_z'+zlab+'.out'
    	gadget_format = pd.read_csv(file,delim_whitespace=True, header=None,index_col=False,comment='#')
	#gadget_format = pd.read_csv('/projects/SPERGEL/COLA_runs/voidcatalogs/'+cola+'z'+redshift+sim+'/'+sim+'_ss1.0/sample_'+sim+'_'+w+d+realization+c+'_z'+zlab+'/'+crazy+'centers_central_'+sim+'_'+w+d+realization+c+'_z'+zlab+'.out', delim_whitespace=True, header=None, index_col=False, comment='#')

	print "read in data"

	data = {}

	data['Position'] = da.from_array(np.column_stack((gadget_format[0], gadget_format[1], gadget_format[2])), chunks=(100,3))
	data['Velocity'] = da.from_array(np.column_stack((np.zeros(len(gadget_format[0])), np.zeros(len(gadget_format[0])), np.zeros(len(gadget_format[0])))), chunks=(100,3)) #transform.StackColumns

	data = nlab.ArrayCatalog(data)

	print "stacked data"

# Convert to MeshSource object, BoxSize in Mpc/h
  	mesh = data.to_mesh(window='tsc', Nmesh=Nmesh, BoxSize = BoxSize, compensated=True, position='Position')
	print "converted data"

# Get void correlation function from the simulation
# Do the Fourier transform
     	t = nlab.FFTCorr(mesh, mode='1d', Nmesh=Nmesh, BoxSize = BoxSize, dr = 1.0)

     	gg = t.corr
     	Xigg = gg['corr']
     	Xir = gg['r']

	# Voids
	# Do correlation function

	#print(type(cola))
	#print(type(redshift))
	#print(type(sim))
	#print(type(crazy))
	#print(type(w))
	#print(type(d))
	#print(type(realization))
	#print(type(c))
	#print(type(scale))
	#print(type(binlab))
    	os.chdir('/')
	file2='/tigress/isk/COLA_runs/plot_data/'+cola+'z'+redshift+sim+'/Xivv_'+crazy+w+d+'_nbodykit_'+sim+str(realization)+c+'_'+scale+binlab+'.dat'
	#print(type(realization))
	#if not (os.path.exists('/tigress/isk/Documents/research/projects/COLA_runs/plot_data/'+cola+'z'+redshift+sim+'/Xivv_'+crazy+w+d+'_nbodykit_'+sim+realization+c+'_'+scale+binlab+'.dat')):
	if not os.path.exists(os.path.dirname(file2)):
	   os.makedirs(os.path.dirname(file2))
	if not os.path.exists(file2):
	   f = open(file2,'w+')
	   #f = open('/tigress/isk/Documents/research/projects/COLA_runs/plot_data/'+cola+'z'+redshift+sim+'/Xivv_'+crazy+w+d+'_nbodykit_'+sim+str(realization)+c+'_'+scale+binlab+'.dat', 'w+')
	   f.write('# r Xi(r) Xi(r)-ShotNoise\n')
	   f.write('# z = '+zlab +'\n')

	   datacc = np.array([gg['r'],gg['corr'].real,gg['corr'].real - gg.attrs['shotnoise']])
	   datacc = datacc.T

	   np.savetxt(f, datacc)
	   f.close()

	   # print out the meta-data
	   for k in gg.attrs:
    	       print("%s = %s" %(k, str(gg.attrs[k])))
    	   
    plt.plot(datacc[0],datacc[1])
    plt.show()

### This section is for halos ###
'''
# halos
gadget_format = pd.read_csv('/projects/SPERGEL/COLA_runs/data/z'+redshift+sim+'/Quijote_'+w+d+'_halos.dat', delim_whitespace=True, header=None, index_col=False, comment='#')

print "read in data"

data = {}

data['Position'] = da.from_array(np.column_stack((gadget_format[1], gadget_format[2], gadget_format[3])), chunks=(100,3))
data['Velocity'] = da.from_array(np.column_stack((gadget_format[4], gadget_format[5], gadget_format[6])), chunks=(100,3)) #transform.StackColumns

data = nlab.ArrayCatalog(data)

print "stacked data"

# Convert to MeshSource object, BoxSize in Mpc/h
mesh = data.to_mesh(window='tsc', Nmesh=Nmesh, BoxSize = BoxSize, compensated=True, position='Position')

# Halos
# Do correlation function
if not (os.path.exists('/Users/ckreisch/Documents/research/projects/COLA_runs/vide_files/plot_data/'+cola+'z'+redshift+sim+'/Xihh_'+w+d+'_nbodykit_'+sim+'_halos_'+scale+binlab+'.dat')):
    f = open('/Users/ckreisch/Documents/research/projects/COLA_runs/vide_files/plot_data/'+cola+'z'+redshift+sim+'/Xihh_'+w+d+'_nbodykit_'+sim+'_halos_'+scale+binlab+'.dat', 'w+')
    f.write('# r Xi(r) Xi(r)-ShotNoise\n')
    f.write('# z = '+zlab +'\n')

    datacc = np.array([gg['r'],gg['corr'].real,gg['corr'].real - gg.attrs['shotnoise']])
    datacc = datacc.T

    # np.savetxt(f, datacc)
    f.close()

# print out the meta-data
for k in gg.attrs:
    print("%s = %s" %(k, str(gg.attrs[k])))

plt.figure()
'''
